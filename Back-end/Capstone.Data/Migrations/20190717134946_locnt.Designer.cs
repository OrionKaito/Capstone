// <auto-generated />
using System;
using Capstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capstone.Data.Migrations
{
    [DbContext(typeof(CapstoneEntities))]
    [Migration("20190717134946_locnt")]
    partial class locnt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capstone.Model.ActionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Capstone.Model.ConnectionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("Capstone.Model.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Capstone.Model.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.Property<Guid>("EventID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHandled");

                    b.Property<int>("NotificationType");

                    b.HasKey("ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Capstone.Model.Permission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Capstone.Model.PermissionOfGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PermissionID");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("PermissionID");

                    b.ToTable("PermissionOfGroups");
                });

            modelBuilder.Entity("Capstone.Model.Request", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.Property<string>("Description");

                    b.Property<string>("InitiatorID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("WorkFlowTemplateID");

                    b.HasKey("ID");

                    b.HasIndex("InitiatorID");

                    b.HasIndex("WorkFlowTemplateID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Capstone.Model.RequestAction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActorID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("NextStepID");

                    b.Property<Guid>("RequestID");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("ActorID");

                    b.HasIndex("NextStepID");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestActions");
                });

            modelBuilder.Entity("Capstone.Model.RequestFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Path");

                    b.Property<Guid>("RequestActionID");

                    b.HasKey("ID");

                    b.HasIndex("RequestActionID");

                    b.ToTable("RequestFiles");
                });

            modelBuilder.Entity("Capstone.Model.RequestValue", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<Guid>("RequestActionID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("RequestActionID");

                    b.ToTable("RequestValues");
                });

            modelBuilder.Entity("Capstone.Model.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Capstone.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmCode");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ManagerID");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","dbo");
                });

            modelBuilder.Entity("Capstone.Model.UserGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Capstone.Model.UserNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<Guid>("NotificationID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Capstone.Model.UserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("RoleID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Capstone.Model.WorkFlowTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerID");

                    b.Property<Guid>("PermissionToEditID");

                    b.Property<Guid>("PermissionToUseID");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("PermissionToEditID");

                    b.HasIndex("PermissionToUseID");

                    b.ToTable("WorkFlowTemplates");
                });

            modelBuilder.Entity("Capstone.Model.WorkFlowTemplateAction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActionTypeID");

                    b.Property<string>("Description");

                    b.Property<bool>("IsApprovedByLineManager");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnd");

                    b.Property<bool>("IsStart");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PermissionToUseID");

                    b.Property<Guid>("WorkFlowTemplateID");

                    b.HasKey("ID");

                    b.HasIndex("ActionTypeID");

                    b.HasIndex("PermissionToUseID");

                    b.HasIndex("WorkFlowTemplateID");

                    b.ToTable("WorkFlowTemplateActions");
                });

            modelBuilder.Entity("Capstone.Model.WorkFlowTemplateActionConnection", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConnectionTypeID");

                    b.Property<Guid>("FromWorkFlowTemplateActionID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ToWorkFlowTemplateActionID");

                    b.HasKey("ID");

                    b.HasIndex("ConnectionTypeID");

                    b.HasIndex("FromWorkFlowTemplateActionID");

                    b.HasIndex("ToWorkFlowTemplateActionID");

                    b.ToTable("WorkFlowTemplateActionConnections");
                });

            modelBuilder.Entity("Capstone.Model.PermissionOfGroup", b =>
                {
                    b.HasOne("Capstone.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.Request", b =>
                {
                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("InitiatorID");

                    b.HasOne("Capstone.Model.WorkFlowTemplate", "WorkFlowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkFlowTemplateID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.RequestAction", b =>
                {
                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("ActorID");

                    b.HasOne("Capstone.Model.WorkFlowTemplateAction", "WorkFlowTemplateAction")
                        .WithMany()
                        .HasForeignKey("NextStepID");

                    b.HasOne("Capstone.Model.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.RequestFile", b =>
                {
                    b.HasOne("Capstone.Model.RequestAction", "RequestAction")
                        .WithMany()
                        .HasForeignKey("RequestActionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.RequestValue", b =>
                {
                    b.HasOne("Capstone.Model.RequestAction", "RequestAction")
                        .WithMany()
                        .HasForeignKey("RequestActionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.UserGroup", b =>
                {
                    b.HasOne("Capstone.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Capstone.Model.UserNotification", b =>
                {
                    b.HasOne("Capstone.Model.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Capstone.Model.UserRole", b =>
                {
                    b.HasOne("Capstone.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Capstone.Model.WorkFlowTemplate", b =>
                {
                    b.HasOne("Capstone.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Capstone.Model.Permission", "PermissionToEdit")
                        .WithMany()
                        .HasForeignKey("PermissionToEditID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.Permission", "PermissionToUse")
                        .WithMany()
                        .HasForeignKey("PermissionToUseID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.WorkFlowTemplateAction", b =>
                {
                    b.HasOne("Capstone.Model.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionToUseID");

                    b.HasOne("Capstone.Model.WorkFlowTemplate", "WorkFlowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkFlowTemplateID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Capstone.Model.WorkFlowTemplateActionConnection", b =>
                {
                    b.HasOne("Capstone.Model.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.WorkFlowTemplateAction", "WorkFlowTemplateActionFrom")
                        .WithMany()
                        .HasForeignKey("FromWorkFlowTemplateActionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.Model.WorkFlowTemplateAction", "WorkFlowTemplateActionTo")
                        .WithMany()
                        .HasForeignKey("ToWorkFlowTemplateActionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
